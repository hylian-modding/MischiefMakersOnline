"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
class ProxySideContainer {
    constructor(side, backing) {
        this.side = side;
        this.backing = backing;
    }
}
exports.ProxySideContainer = ProxySideContainer;
function SidedProxy(side, inst) {
    return function (target, propertyKey) {
        if (target.ModLoader === undefined) {
            target['ModLoader'] = {};
        }
        if (target.ModLoader.sidedproxies === undefined) {
            target.ModLoader['sidedproxies'] = new Map();
        }
        target.ModLoader.sidedproxies.set(new ProxySideContainer(side, inst), propertyKey);
    };
}
exports.SidedProxy = SidedProxy;
function setupSidedProxy(instance, isClient, isServer) {
    let p = Object.getPrototypeOf(instance);
    let arr = [];
    if (p.hasOwnProperty('ModLoader')) {
        if (p.ModLoader.hasOwnProperty("hasBeenProcessed")) {
            return arr;
        }
        if (p.ModLoader.hasOwnProperty('sidedproxies')) {
            p.ModLoader.sidedproxies.forEach(function (value, key) {
                if (isClient && key.side === 0 /* CLIENT */) {
                    instance[value] = new key.backing();
                    arr.push(instance[value]);
                }
                else if (isServer && key.side === 1 /* SERVER */) {
                    instance[value] = new key.backing();
                    arr.push(instance[value]);
                }
            });
        }
    }
    return arr;
}
exports.setupSidedProxy = setupSidedProxy;
function ParentReference() {
    return function (target, propertyKey) {
        if (target.ModLoader === undefined) {
            target['ModLoader'] = {};
        }
        if (target.ModLoader.ParentReference === undefined) {
            target.ModLoader['ParentReference'] = new Map();
        }
        target.ModLoader.ParentReference.set(propertyKey, propertyKey);
    };
}
exports.ParentReference = ParentReference;
function setupParentReference(instance, parent) {
    let p = Object.getPrototypeOf(instance);
    if (p.hasOwnProperty('ModLoader')) {
        if (p.ModLoader.hasOwnProperty("hasBeenProcessed")) {
            return;
        }
        if (p.ModLoader.hasOwnProperty('ParentReference')) {
            p.ModLoader.ParentReference.forEach(function (value, key) {
                instance[key] = parent;
            });
        }
    }
}
exports.setupParentReference = setupParentReference;
//# sourceMappingURL=SidedProxy.js.map